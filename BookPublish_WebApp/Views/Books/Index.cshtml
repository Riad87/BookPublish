@model BookPublish_WebApp.Models.BooksViewModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Könyvek";

}

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.NameSort)
    @Html.HiddenFor(m => m.CurrentFilter)
    @Html.HiddenFor(m => m.SortOrder)

    <div class="container-fluid">
        <p>@Html.TextBox("searchString") <input class="col-xs-offset-3 col-xs-2" type="submit" value="Keresés" /></p>
    </div>

    <table class="table table-striped table-hover table-responsive table-condensed" border="0">
        <tr>
            <th>
                #
            </th>
            <th align="center">
                @Html.ActionLink("Azonosító", "Index", new { sortOrder = Model.ItemNum, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("ISBN", "Index", new { sortOrder = Model.ISBN, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Szerző", "Index", new { sortOrder = Model.ISBN, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Könyv neve", "Index", new { sortOrder = Model.NameSort, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Nettó ár", "Index", new { sortOrder = Model.NetValue, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Áfa", "Index", new { sortOrder = Model.Vat, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Bruttó ár", "Index", new { sortOrder = Model.GrossValue, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Érvényes -tól", "Index", new { sortOrder = Model.ValidFrom, currentfilter = Model.CurrentFilter })
            </th>
            <th align="center">
                @Html.ActionLink("Érvényes -ig", "Index", new { sortOrder = Model.ValidTo, currentfilter = Model.CurrentFilter })
            </th>
            <th align="right">
                Találatok:
                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "2", 2 }, { "5", 5 }, { "10", 10 } }, "Key", "Value", 10), new { id = "pagesizelist" })
                db/oldal

            </th>
        </tr>

        @for (int i = 0; i < Model.Books.Count; i++)
        {
            <tr>
                <td>
                    @Html.HiddenFor(model => model.Books[i].ID)
                    @Html.HiddenFor(model => model.Books[i].ISBN)
                    @Html.HiddenFor(model => model.Books[i].Author)
                    @Html.HiddenFor(model => model.Books[i].Name)
                    @Html.HiddenFor(model => model.Books[i].NetValue)
                    @Html.HiddenFor(model => model.Books[i].Vat)
                    @Html.HiddenFor(model => model.Books[i].GrossValue)
                    @Html.HiddenFor(model => model.Books[i].ValidFrom)
                    @Html.HiddenFor(model => model.Books[i].ValidTo)

                    @Html.EditorFor(model => model.Books[i].IsDeleted)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].ItemNumber)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].ISBN)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].Author.AuthorName)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].Name)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].NetValue) Ft
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].Vat)%
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].GrossValue) Ft 
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].ValidFrom)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Books[i].ValidTo)
                </td>
                <td>
                    <button  data-toggle = "modal", data-target = "#myModal">@Html.ActionLink("Edit", "Edit", new { id = Model.Books[i].ID }) </button>

                </td>
            </tr>
        }

    </table>

        <div class="container">
            Page @Model.PageNumber of @Model.PageCount

            @Html.PagedListPager(new PagedList.PagedList<object>(Model.PagerList.AsQueryable(), Model.PageNumber, Model.PageSize),
                page => Url.Action("Index", new { page, sortOrder = Model.CurrentSort, currentFilter = Model.CurrentFilter, pagesize = Model.PageSize }))
        </div>

        <div class="container">
            <input type="submit" value="Törlés" />
            @*<button class="btn btn-default col-xs-offset-2 col-xs-2">@Html.ActionLink("Create New", "Create")</button>
                <button class="btn btn-danger col-xs-offset-4 col-xs-2">@Html.ActionLink("Delete", "Delete")</button>*@

        </div>

        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Books[i, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ItemNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ItemNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ItemNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NetValue, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.NetValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NetValue, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Vat, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Vat, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Vat, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.GrossValue, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.GrossValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.GrossValue, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ValidFrom, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ValidFrom, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ValidFrom, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ValidTo, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ValidTo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ValidTo, "", new { @class = "text-danger" })
                            </div>
                        </div>                        
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>

       
}
@section scripts{
    @Scripts.Render("~/bundles/jquery")

}
